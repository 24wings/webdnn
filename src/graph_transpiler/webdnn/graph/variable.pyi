from typing import Union, List, Set, Tuple, Sequence

from webdnn.graph.axis import AxisKeyDict, Axis
from webdnn.graph.node import Node
from webdnn.graph.operator import Operator
from webdnn.graph.order import Order
from webdnn.graph.placeholder import Placeholder


class Variable(Node):
    _shape: Tuple[Union[int, Placeholder]]
    _order: Order

    def __init__(self, shape: Sequence[Union[int, Placeholder]], order: Order): ...

    @property
    def shape(self) -> Tuple[Union[int, Placeholder], ...]: ...

    @property
    def input_to(self) -> Set[Operator]: ...

    @property
    def output_from(self) -> Operator: ...

    @property
    def order(self) -> Order: ...

    @property
    def name(self) -> str: ...

    @name.setter
    def name(self, name: str):

    @property
    def size(self) -> Union[int, Placeholder]: ...

    @property
    def ndim(self) -> int: ...

    @property
    def shape_dict(self) -> AxisKeyDict[Union[int, Placeholder]]: ...

    @property
    def stride(self) -> List[Union[int, Placeholder]]: ...

    @property
    def stride_dict(self) -> AxisKeyDict[Union[int, Placeholder]]: ...

    def change_order(self, order: Order) -> Variable: ...

    def replace(self, new_variable: Variable, with_assert: bool = True): ...

    def __repr__(self) -> str: ...

    def __str__(self) -> str: ...

    def __pos__(self) -> Variable: ...

    def __neg__(self) -> Variable: ...

    def __abs__(self) -> Variable: ...

    def __add__(self, other: Union[int, float, Variable]) -> Variable: ...

    def __radd__(self, other: Union[int, float, Variable]) -> Variable: ...

    def __sub__(self, other: Union[int, float, Variable]) -> Variable: ...

    def __rsub__(self, other: Union[int, float, Variable]) -> Variable: ...

    def __mul__(self, other: Union[int, float, Variable]) -> Variable: ...

    def __rmul__(self, other: Union[int, float, Variable]) -> Variable: ...

    def __truediv__(self, other: Union[int, float, Variable]) -> Variable: ...

    def __rtruediv__(self, other: Union[int, float, Variable]) -> Variable: ...

    def __pow__(self, power: Union[int, float, Variable], modulo=None) -> Variable: ...

    def __rpow__(self, other: Union[int, float, Variable]) -> Variable: ...

    def __gt__(self, other: Union[int, float, Variable]) -> Variable: ...

    def __ge__(self, other: Union[int, float, Variable]) -> Variable: ...

    def __lt__(self, other: Union[int, float, Variable]) -> Variable: ...

    def __le__(self, other: Union[int, float, Variable]) -> Variable: ...

    def __getitem__(self, slices: Tuple[Union[int, None, ellipsis, slice], ...]) -> Variable: ...

    def reshape(self, shape: Sequence[Union[int, Placeholder]], order: Order) -> Variable: ...

    def reshape_like(self, other: Variable) -> Variable: ...

    def expand_dims(self, axis: Axis, index: int = -1) -> Variable: ...

    def squeeze(self, axis: Union[Axis, Sequence[Axis]] = None) -> Variable: ...

    def combine_axes(self, axes: Sequence[Axis], axis: Axis) -> Variable: ...

    def transpose(self, order: Order) -> Variable: ...

    def transpose_like(self, other: Variable) -> Variable: ...

    def reinterpret_axes(self, order: Order) -> Variable: ...
