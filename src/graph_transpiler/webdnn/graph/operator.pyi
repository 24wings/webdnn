from typing import Dict, Tuple, Optional

from pylint.test.functional.undefined_variable import Self

from webdnn.graph.graph import Graph
from webdnn.graph.node import Node
from webdnn.graph.variable import Variable


class Operator(Node):
    _inputs: Dict[str, Variable]
    _outputs: Dict[str, Variable]

    def __init__(self, name: Optional[str] = None): ...

    def copy(self) -> Self: ...

    @property
    def inputs(self) -> Dict[str, Variable]: ...

    @property
    def outputs(self) -> Dict[str, Variable]: ...

    def get_input_name(self, var: Variable) -> str: ...

    def get_output_name(self, var: Variable) -> str: ...

    def append_input(self, name: str, var: Variable): ...

    def remove_input(self, var: Variable): ...

    def replace_input(self, v_old: Variable, v_new: Variable, with_assert: bool = True): ...

    def append_output(self, name: str, var: Variable): ...

    def remove_output(self, var: Variable): ...

    def replace_output(self, v_old: Variable, v_new: Variable, with_assert: bool = True): ...

    def remove_all(self): ...

    def replace(self, op_new: Operator): ...

    def __repr__(self) -> str: ...

    def __str__(self) -> str: ...

    def __call__(self, *args, **kwargs) -> Tuple[Variable, ...]: ...

    def exec(self) -> Tuple[Variable, ...]: ...

    def fold_constance(self, graph: Graph): ...
